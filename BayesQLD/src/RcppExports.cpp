// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// runSampler
Rcpp::List runSampler(const std::vector<double>& nPos, const std::vector<double>& nWells, const std::vector<double>& dilFrac, const int32_t& nChains, const int32_t& nBurnin, const int32_t& nSample);
RcppExport SEXP _BayesQLD_runSampler(SEXP nPosSEXP, SEXP nWellsSEXP, SEXP dilFracSEXP, SEXP nChainsSEXP, SEXP nBurninSEXP, SEXP nSampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nPos(nPosSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type nWells(nWellsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type dilFrac(dilFracSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type nChains(nChainsSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type nBurnin(nBurninSEXP);
    Rcpp::traits::input_parameter< const int32_t& >::type nSample(nSampleSEXP);
    rcpp_result_gen = Rcpp::wrap(runSampler(nPos, nWells, dilFrac, nChains, nBurnin, nSample));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesQLD_runSampler", (DL_FUNC) &_BayesQLD_runSampler, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesQLD(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
